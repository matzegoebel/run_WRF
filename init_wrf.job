#!/bin/bash

#$ -q std.q
#$ -cwd
#$ -N wrf
#$ -o /scratch/$USER/phd/logs/$JOB_NAME_$JOB_ID_init.out
#$ -e /scratch/$USER/phd/logs/$JOB_NAME_$JOB_ID_init.err

# -j yes
#$ -l h_rt=00:10:00
#$ -M matthias.goebel@uibk.ac.at
#$ -m a
# -m n
#$ -l h_vmem=20G
#$ -l h_stack=128M

# -pe openmpi-fillup 4


set -e

if [ -z $ENVIRONMENT ]
then
  home_dir="$HOME"
  ulimit -s unlimited
  set -o errexit

else
  echo "start cluster job"
  home_dir="$SCRATCH"
  if [ -d $homedir/parallel_studio_2019 ]
  then
    module purge
    export NETCDF="${home_dir}/netcdf"
    source ${home_dir}/parallel_studio_2019/parallel_studio_xe_2019.4.070/bin/psxevars.sh
  else
    module load intel/18.0u1 netcdf-4
  fi

fi
code_dir=$(pwd)
build_dir="${home_dir}/wrf/builds/$wrfv"
run_dir="${home_dir}/wrf/runs/WRF_$JOB_NAME"
wrf_case_dir="${build_dir}/test/$ideal_case"
cd $wrf_case_dir

echo "Copy files"

rm $run_dir -rf
mkdir -p $run_dir
cd $run_dir

#~ echo "linking"
trans="cp" #"ln -sf"
$trans ${build_dir}/run/RRTM* .
$trans ${build_dir}/run/LANDUSE.TBL .
$trans ${build_dir}/run/SOILPARM.TBL .
$trans ${build_dir}/run/VEGPARM.TBL .
$trans ${build_dir}/run/GENPARM.TBL .
$trans ${build_dir}/run/ozone* .
$trans ${build_dir}/run/p3* .
$trans ${build_dir}/main/wrf.exe .
$trans ${build_dir}/main/ideal.exe .
#~ $trans ${build_dir}/run/freezeH2O.dat .
#~ $trans ${build_dir}/run/qr_acr* .
cp -u -r $wrf_case_dir/* $run_dir


input_sounding_org="input_sounding"
rm -f $input_sounding_org
cp ${input_sounding_org}_${input_sounding} ${input_sounding_org}

readonly LOG_FILE="init.log"
readonly ERR_FILE="init.err"
touch $LOG_FILE
touch $ERR_FILE
exec 1>$LOG_FILE
exec 2>$ERR_FILE


echo "create namelist"
echo $wrf_args

source ${code_dir}/search_replace.sh namelist.input namelist.$JOB_NAME $wrf_args
cp namelist.$JOB_NAME namelist.input 

echo
echo "Running ideal"
echo

echo "sleep $sleep s"
sleep $sleep


./ideal.exe
wait


if [[ ${wrfv} == *"mpi"* ]]
then
  cat rsl.error.0000
  source ${code_dir}/search_replace.sh namelist.input namelist.input nproc_x $nx nproc_y $ny
fi

