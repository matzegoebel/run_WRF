#!/bin/bash


set -e


#~ t0=$(expr `date +%s%N` / 1000000)
#~ echo (( t - t0))


code_dir=$(pwd)
build_dir="${build_path}/$wrfv"
run_dir="${run_path}/WRF_${run_id}"
wrf_case_dir="${build_dir}/test/$ideal_case"

echo "Copy files to $run_dir"
rm $run_dir -rf
mkdir -p $run_dir
cd $run_dir

#redirect logs to file
exec 1> "init.log"
exec 2> "init.err"

if (( cluster==0 ))
then
  #~ ulimit -s unlimited
  set -o errexit

else
  echo "start cluster job"
  module purge
  eval $module_load
fi

if [ -z "$wrf_args" ]
then
  wrf_args=$1
fi


#from run directory for data files needed by physics modules; symbolic links sufficient
cp -s ${build_dir}/run/* .
#remove old data if available
rm -f wrfinput* rsl.*

#from ideal case directory for namelist file, input sounding and IO file 
cd $wrf_case_dir
cp --remove-destination namelist.input input_sounding* $iofile $run_dir
cd $run_dir
#binaries from main
cp -f -b ${build_dir}/main/wrf.exe ${build_dir}/main/ideal.exe .

if [ -n "${input_sounding}" ]
then
  input_sounding_org="input_sounding"
  input_sounding=${input_sounding_org}_${input_sounding}
  rm -f ${input_sounding_org}
  if [ -f ${input_sounding} ]
  then
    cp ${input_sounding} ${input_sounding_org}
  else
    echo "Input sounding ${input_sounding} not available! Exit..." >&2
    
    exit 1
  fi
else
  input_sounding="input_sounding" 
fi

echo "use input sounding: ${input_sounding}"

echo
echo "create namelist"
#echo $wrf_args

source ${code_dir}/search_replace.sh namelist.input namelist.$RUN_ID 1 $wrf_args
cp namelist.$RUN_ID namelist.input

echo
echo "Running ideal"

#make simulations asynchronous (prevent simultaneous writing to disk)
echo
echo "sleep $sleep s"
echo
sleep $sleep

set +e
./ideal.exe
err=$?
wait
set -e

if [[ -f rsl.out.0000 ]]
then
  if (( err != 0 ))
  then
    >&2 cat rsl.error.0000
  else
    cat rsl.out.0000
  fi
fi

#include information about number of processors in namelist.input
if (( nx*ny > 1 ))
then
  source ${code_dir}/search_replace.sh namelist.input namelist.input 0 nproc_x $nx nproc_y $ny
fi

exit $err

